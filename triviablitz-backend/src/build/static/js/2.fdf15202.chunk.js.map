{"version":3,"sources":["../node_modules/howler/dist/howler.js"],"names":["global","__WEBPACK_AMD_DEFINE_RESULT__","HowlerGlobal","this","init","prototype","self","Howler","_counter","_html5AudioPool","html5PoolSize","_codecs","_howls","_muted","_volume","_canPlayEvent","_navigator","window","navigator","masterGain","noAudio","usingWebAudio","autoSuspend","ctx","autoUnlock","_setup","volume","vol","parseFloat","setupAudioContext","gain","setValueAtTime","currentTime","i","length","_webAudio","ids","_getSoundIds","j","sound","_soundById","_node","mute","muted","stop","unload","close","codecs","ext","replace","state","_autoSuspend","Audio","oncanplaythrough","e","_setupCodecs","audioTest","err","canPlayType","mpegTest","ua","userAgent","checkOpera","match","isOldOpera","parseInt","split","checkSafari","indexOf","safariVersion","isOldSafari","mp3","mpeg","opus","ogg","oga","wav","aac","caf","m4a","m4b","mp4","weba","webm","dolby","flac","_unlockAudio","_audioUnlocked","_mobileUnloaded","sampleRate","_scratchBuffer","createBuffer","unlock","audioNode","_unlocked","_releaseHtml5Audio","load","_autoResume","source","createBufferSource","buffer","connect","destination","start","noteOn","resume","onended","disconnect","document","removeEventListener","_emit","addEventListener","_obtainHtml5Audio","pop","testPlay","play","Promise","then","catch","console","warn","audio","push","suspend","_sounds","_paused","_suspendTimer","clearTimeout","setTimeout","handleSuspension","_resumeAfterSuspend","Howl","o","src","error","_autoplay","autoplay","_format","format","_html5","html5","_loop","loop","_pool","pool","_preload","preload","_rate","rate","_sprite","sprite","_src","undefined","_xhr","method","xhr","headers","withCredentials","_duration","_state","_endTimers","_queue","_playLock","_onend","onend","fn","_onfade","onfade","_onload","onload","_onloaderror","onloaderror","_onplayerror","onplayerror","_onpause","onpause","_onplay","onplay","_onstop","onstop","_onmute","onmute","_onvolume","onvolume","_onrate","onrate","_onseek","onseek","_onunlock","onunlock","_onresume","event","action","url","str","exec","toLowerCase","location","protocol","slice","Sound","loadBuffer","internal","id","num","_ended","_id","_inactiveSound","soundId","_loadQueue","seek","Math","max","_seek","duration","timeout","abs","setParams","_start","_stop","node","playWebAudio","_refreshBuffer","_playStart","bufferSource","noteGrainOn","Infinity","bind","once","_clearTimer","playHtml5","playbackRate","paused","loadedNoReadyState","ejecta","readyState","isCocoonJS","listener","pause","_rateSeek","_stopFade","noteOff","_cleanBuffer","isNaN","arguments","_clearSound","_interval","args","apply","fade","from","to","len","min","end","linearRampToValueAtTime","_startFadeInterval","isGroup","diff","steps","stepLen","lastTick","Date","now","_fadeTo","setInterval","tick","round","clearInterval","cancelScheduledValues","loopStart","loopEnd","playing","realTime","rateSeek","seekAndEmit","emitSeek","sounds","_errorFn","_loadFn","_endFn","index","splice","remCache","cache","on","events","off","isId","keys","Object","Array","isArray","msg","call","task","shift","ended","_drain","reset","limit","cnt","_panner","isIOS","vendor","test","howl","_parent","parent","create","createGain","createGainNode","_errorListener","_loadListener","_endListener","code","ceil","__default","loadSound","data","atob","dataView","Uint8Array","charCodeAt","decodeAudioData","XMLHttpRequest","open","responseType","forEach","key","setRequestHeader","status","response","onerror","safeXhrSend","send","arraybuffer","success","AudioContext","webkitAudioContext","iOS","platform","appVersion","version","safari","exports","module","_super","_pos","_orientation","stereo","pan","pos","x","y","z","positionX","setTargetAtTime","positionY","positionZ","setPosition","orientation","xUp","yUp","zUp","or","forwardX","forwardY","forwardZ","upX","upY","upZ","setOrientation","_stereo","_pannerAttr","coneInnerAngle","coneOuterAngle","coneOuterGain","distanceModel","maxDistance","panningModel","refDistance","rolloffFactor","_onstereo","onstereo","_onpos","onpos","_onorientation","onorientation","pannerType","createStereoPanner","setupPanner","orientationX","orientationY","orientationZ","pannerAttr","_coneInnerAngle","_coneOuterAngle","_coneOuterGain","_distanceModel","_maxDistance","_refDistance","_rolloffFactor","_panningModel","pa","panner","type","createPanner"],"mappings":"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","file":"static/js/2.fdf15202.chunk.js","sourcesContent":["/*!\n *  howler.js v2.2.3\n *  howlerjs.com\n *\n *  (c) 2013-2020, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n(function () {\n  'use strict';\n  /** Global Methods **/\n\n  /***************************************************************************/\n\n  /**\n   * Create the global controller. All contained methods and properties apply\n   * to all sounds that are currently playing or will be in the future.\n   */\n\n  var HowlerGlobal = function HowlerGlobal() {\n    this.init();\n  };\n\n  HowlerGlobal.prototype = {\n    /**\n     * Initialize the global Howler object.\n     * @return {Howler}\n     */\n    init: function init() {\n      var self = this || Howler; // Create a global ID counter.\n\n      self._counter = 1000; // Pool of unlocked HTML5 Audio objects.\n\n      self._html5AudioPool = [];\n      self.html5PoolSize = 10; // Internal properties.\n\n      self._codecs = {};\n      self._howls = [];\n      self._muted = false;\n      self._volume = 1;\n      self._canPlayEvent = 'canplaythrough';\n      self._navigator = typeof window !== 'undefined' && window.navigator ? window.navigator : null; // Public properties.\n\n      self.masterGain = null;\n      self.noAudio = false;\n      self.usingWebAudio = true;\n      self.autoSuspend = true;\n      self.ctx = null; // Set to false to disable the auto audio unlocker.\n\n      self.autoUnlock = true; // Setup the various state values for global tracking.\n\n      self._setup();\n\n      return self;\n    },\n\n    /**\n     * Get/set the global volume for all sounds.\n     * @param  {Float} vol Volume from 0.0 to 1.0.\n     * @return {Howler/Float}     Returns self or current volume.\n     */\n    volume: function volume(vol) {\n      var self = this || Howler;\n      vol = parseFloat(vol); // If we don't have an AudioContext created yet, run the setup.\n\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        self._volume = vol; // Don't update any of the nodes if we are muted.\n\n        if (self._muted) {\n          return self;\n        } // When using Web Audio, we just need to adjust the master gain.\n\n\n        if (self.usingWebAudio) {\n          self.masterGain.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n        } // Loop through and change volume for all HTML5 audio nodes.\n\n\n        for (var i = 0; i < self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds(); // Loop through all sounds and change the volumes.\n\n\n            for (var j = 0; j < ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node) {\n                sound._node.volume = sound._volume * vol;\n              }\n            }\n          }\n        }\n\n        return self;\n      }\n\n      return self._volume;\n    },\n\n    /**\n     * Handle muting and unmuting globally.\n     * @param  {Boolean} muted Is muted or not.\n     */\n    mute: function mute(muted) {\n      var self = this || Howler; // If we don't have an AudioContext created yet, run the setup.\n\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      self._muted = muted; // With Web Audio, we just need to mute the master gain.\n\n      if (self.usingWebAudio) {\n        self.masterGain.gain.setValueAtTime(muted ? 0 : self._volume, Howler.ctx.currentTime);\n      } // Loop through and mute all HTML5 Audio nodes.\n\n\n      for (var i = 0; i < self._howls.length; i++) {\n        if (!self._howls[i]._webAudio) {\n          // Get all of the sounds in this Howl group.\n          var ids = self._howls[i]._getSoundIds(); // Loop through all sounds and mark the audio node as muted.\n\n\n          for (var j = 0; j < ids.length; j++) {\n            var sound = self._howls[i]._soundById(ids[j]);\n\n            if (sound && sound._node) {\n              sound._node.muted = muted ? true : sound._muted;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Handle stopping all sounds globally.\n     */\n    stop: function stop() {\n      var self = this || Howler; // Loop through all Howls and stop them.\n\n      for (var i = 0; i < self._howls.length; i++) {\n        self._howls[i].stop();\n      }\n\n      return self;\n    },\n\n    /**\n     * Unload and destroy all currently loaded Howl objects.\n     * @return {Howler}\n     */\n    unload: function unload() {\n      var self = this || Howler;\n\n      for (var i = self._howls.length - 1; i >= 0; i--) {\n        self._howls[i].unload();\n      } // Create a new AudioContext to make sure it is fully reset.\n\n\n      if (self.usingWebAudio && self.ctx && typeof self.ctx.close !== 'undefined') {\n        self.ctx.close();\n        self.ctx = null;\n        setupAudioContext();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for codec support of specific extension.\n     * @param  {String} ext Audio file extention.\n     * @return {Boolean}\n     */\n    codecs: function codecs(ext) {\n      return (this || Howler)._codecs[ext.replace(/^x-/, '')];\n    },\n\n    /**\n     * Setup various state values for global tracking.\n     * @return {Howler}\n     */\n    _setup: function _setup() {\n      var self = this || Howler; // Keeps track of the suspend/resume state of the AudioContext.\n\n      self.state = self.ctx ? self.ctx.state || 'suspended' : 'suspended'; // Automatically begin the 30-second suspend process\n\n      self._autoSuspend(); // Check if audio is available.\n\n\n      if (!self.usingWebAudio) {\n        // No audio is available on this system if noAudio is set to true.\n        if (typeof Audio !== 'undefined') {\n          try {\n            var test = new Audio(); // Check if the canplaythrough event is available.\n\n            if (typeof test.oncanplaythrough === 'undefined') {\n              self._canPlayEvent = 'canplay';\n            }\n          } catch (e) {\n            self.noAudio = true;\n          }\n        } else {\n          self.noAudio = true;\n        }\n      } // Test to make sure audio isn't disabled in Internet Explorer.\n\n\n      try {\n        var test = new Audio();\n\n        if (test.muted) {\n          self.noAudio = true;\n        }\n      } catch (e) {} // Check for supported codecs.\n\n\n      if (!self.noAudio) {\n        self._setupCodecs();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for browser support for various codecs and cache the results.\n     * @return {Howler}\n     */\n    _setupCodecs: function _setupCodecs() {\n      var self = this || Howler;\n      var audioTest = null; // Must wrap in a try/catch because IE11 in server mode throws an error.\n\n      try {\n        audioTest = typeof Audio !== 'undefined' ? new Audio() : null;\n      } catch (err) {\n        return self;\n      }\n\n      if (!audioTest || typeof audioTest.canPlayType !== 'function') {\n        return self;\n      }\n\n      var mpegTest = audioTest.canPlayType('audio/mpeg;').replace(/^no$/, ''); // Opera version <33 has mixed MP3 support, so we need to check for and block it.\n\n      var ua = self._navigator ? self._navigator.userAgent : '';\n      var checkOpera = ua.match(/OPR\\/([0-6].)/g);\n      var isOldOpera = checkOpera && parseInt(checkOpera[0].split('/')[1], 10) < 33;\n      var checkSafari = ua.indexOf('Safari') !== -1 && ua.indexOf('Chrome') === -1;\n      var safariVersion = ua.match(/Version\\/(.*?) /);\n      var isOldSafari = checkSafari && safariVersion && parseInt(safariVersion[1], 10) < 15;\n      self._codecs = {\n        mp3: !!(!isOldOpera && (mpegTest || audioTest.canPlayType('audio/mp3;').replace(/^no$/, ''))),\n        mpeg: !!mpegTest,\n        opus: !!audioTest.canPlayType('audio/ogg; codecs=\"opus\"').replace(/^no$/, ''),\n        ogg: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        oga: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        wav: !!(audioTest.canPlayType('audio/wav; codecs=\"1\"') || audioTest.canPlayType('audio/wav')).replace(/^no$/, ''),\n        aac: !!audioTest.canPlayType('audio/aac;').replace(/^no$/, ''),\n        caf: !!audioTest.canPlayType('audio/x-caf;').replace(/^no$/, ''),\n        m4a: !!(audioTest.canPlayType('audio/x-m4a;') || audioTest.canPlayType('audio/m4a;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        m4b: !!(audioTest.canPlayType('audio/x-m4b;') || audioTest.canPlayType('audio/m4b;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        mp4: !!(audioTest.canPlayType('audio/x-mp4;') || audioTest.canPlayType('audio/mp4;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        weba: !!(!isOldSafari && audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, '')),\n        webm: !!(!isOldSafari && audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, '')),\n        dolby: !!audioTest.canPlayType('audio/mp4; codecs=\"ec-3\"').replace(/^no$/, ''),\n        flac: !!(audioTest.canPlayType('audio/x-flac;') || audioTest.canPlayType('audio/flac;')).replace(/^no$/, '')\n      };\n      return self;\n    },\n\n    /**\n     * Some browsers/devices will only allow audio to be played after a user interaction.\n     * Attempt to automatically unlock audio on the first user interaction.\n     * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/\n     * @return {Howler}\n     */\n    _unlockAudio: function _unlockAudio() {\n      var self = this || Howler; // Only run this if Web Audio is supported and it hasn't already been unlocked.\n\n      if (self._audioUnlocked || !self.ctx) {\n        return;\n      }\n\n      self._audioUnlocked = false;\n      self.autoUnlock = false; // Some mobile devices/platforms have distortion issues when opening/closing tabs and/or web views.\n      // Bugs in the browser (especially Mobile Safari) can cause the sampleRate to change from 44100 to 48000.\n      // By calling Howler.unload(), we create a new AudioContext with the correct sampleRate.\n\n      if (!self._mobileUnloaded && self.ctx.sampleRate !== 44100) {\n        self._mobileUnloaded = true;\n        self.unload();\n      } // Scratch buffer for enabling iOS to dispose of web audio buffers correctly, as per:\n      // http://stackoverflow.com/questions/24119684\n\n\n      self._scratchBuffer = self.ctx.createBuffer(1, 1, 22050); // Call this method on touch start to create and play a buffer,\n      // then check if the audio actually played to determine if\n      // audio has now been unlocked on iOS, Android, etc.\n\n      var unlock = function unlock(e) {\n        // Create a pool of unlocked HTML5 Audio objects that can\n        // be used for playing sounds without user interaction. HTML5\n        // Audio objects must be individually unlocked, as opposed\n        // to the WebAudio API which only needs a single activation.\n        // This must occur before WebAudio setup or the source.onended\n        // event will not fire.\n        while (self._html5AudioPool.length < self.html5PoolSize) {\n          try {\n            var audioNode = new Audio(); // Mark this Audio object as unlocked to ensure it can get returned\n            // to the unlocked pool when released.\n\n            audioNode._unlocked = true; // Add the audio node to the pool.\n\n            self._releaseHtml5Audio(audioNode);\n          } catch (e) {\n            self.noAudio = true;\n            break;\n          }\n        } // Loop through any assigned audio nodes and unlock them.\n\n\n        for (var i = 0; i < self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds(); // Loop through all sounds and unlock the audio nodes.\n\n\n            for (var j = 0; j < ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node && !sound._node._unlocked) {\n                sound._node._unlocked = true;\n\n                sound._node.load();\n              }\n            }\n          }\n        } // Fix Android can not play in suspend state.\n\n\n        self._autoResume(); // Create an empty buffer.\n\n\n        var source = self.ctx.createBufferSource();\n        source.buffer = self._scratchBuffer;\n        source.connect(self.ctx.destination); // Play the empty buffer.\n\n        if (typeof source.start === 'undefined') {\n          source.noteOn(0);\n        } else {\n          source.start(0);\n        } // Calling resume() on a stack initiated by user gesture is what actually unlocks the audio on Android Chrome >= 55.\n\n\n        if (typeof self.ctx.resume === 'function') {\n          self.ctx.resume();\n        } // Setup a timeout to check that we are unlocked on the next event loop.\n\n\n        source.onended = function () {\n          source.disconnect(0); // Update the unlocked state and prevent this check from happening again.\n\n          self._audioUnlocked = true; // Remove the touch start listener.\n\n          document.removeEventListener('touchstart', unlock, true);\n          document.removeEventListener('touchend', unlock, true);\n          document.removeEventListener('click', unlock, true);\n          document.removeEventListener('keydown', unlock, true); // Let all sounds know that audio has been unlocked.\n\n          for (var i = 0; i < self._howls.length; i++) {\n            self._howls[i]._emit('unlock');\n          }\n        };\n      }; // Setup a touch start listener to attempt an unlock in.\n\n\n      document.addEventListener('touchstart', unlock, true);\n      document.addEventListener('touchend', unlock, true);\n      document.addEventListener('click', unlock, true);\n      document.addEventListener('keydown', unlock, true);\n      return self;\n    },\n\n    /**\n     * Get an unlocked HTML5 Audio object from the pool. If none are left,\n     * return a new Audio object and throw a warning.\n     * @return {Audio} HTML5 Audio object.\n     */\n    _obtainHtml5Audio: function _obtainHtml5Audio() {\n      var self = this || Howler; // Return the next object from the pool if one exists.\n\n      if (self._html5AudioPool.length) {\n        return self._html5AudioPool.pop();\n      } //.Check if the audio is locked and throw a warning.\n\n\n      var testPlay = new Audio().play();\n\n      if (testPlay && typeof Promise !== 'undefined' && (testPlay instanceof Promise || typeof testPlay.then === 'function')) {\n        testPlay.catch(function () {\n          console.warn('HTML5 Audio pool exhausted, returning potentially locked audio object.');\n        });\n      }\n\n      return new Audio();\n    },\n\n    /**\n     * Return an activated HTML5 Audio object to the pool.\n     * @return {Howler}\n     */\n    _releaseHtml5Audio: function _releaseHtml5Audio(audio) {\n      var self = this || Howler; // Don't add audio to the pool if we don't know if it has been unlocked.\n\n      if (audio._unlocked) {\n        self._html5AudioPool.push(audio);\n      }\n\n      return self;\n    },\n\n    /**\n     * Automatically suspend the Web Audio AudioContext after no sound has played for 30 seconds.\n     * This saves processing/energy and fixes various browser-specific bugs with audio getting stuck.\n     * @return {Howler}\n     */\n    _autoSuspend: function _autoSuspend() {\n      var self = this;\n\n      if (!self.autoSuspend || !self.ctx || typeof self.ctx.suspend === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      } // Check if any sounds are playing.\n\n\n      for (var i = 0; i < self._howls.length; i++) {\n        if (self._howls[i]._webAudio) {\n          for (var j = 0; j < self._howls[i]._sounds.length; j++) {\n            if (!self._howls[i]._sounds[j]._paused) {\n              return self;\n            }\n          }\n        }\n      }\n\n      if (self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n      } // If no sound has played after 30 seconds, suspend the context.\n\n\n      self._suspendTimer = setTimeout(function () {\n        if (!self.autoSuspend) {\n          return;\n        }\n\n        self._suspendTimer = null;\n        self.state = 'suspending'; // Handle updating the state of the audio context after suspending.\n\n        var handleSuspension = function handleSuspension() {\n          self.state = 'suspended';\n\n          if (self._resumeAfterSuspend) {\n            delete self._resumeAfterSuspend;\n\n            self._autoResume();\n          }\n        }; // Either the state gets suspended or it is interrupted.\n        // Either way, we need to update the state to suspended.\n\n\n        self.ctx.suspend().then(handleSuspension, handleSuspension);\n      }, 30000);\n      return self;\n    },\n\n    /**\n     * Automatically resume the Web Audio AudioContext when a new sound is played.\n     * @return {Howler}\n     */\n    _autoResume: function _autoResume() {\n      var self = this;\n\n      if (!self.ctx || typeof self.ctx.resume === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      if (self.state === 'running' && self.ctx.state !== 'interrupted' && self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n        self._suspendTimer = null;\n      } else if (self.state === 'suspended' || self.state === 'running' && self.ctx.state === 'interrupted') {\n        self.ctx.resume().then(function () {\n          self.state = 'running'; // Emit to all Howls that the audio has resumed.\n\n          for (var i = 0; i < self._howls.length; i++) {\n            self._howls[i]._emit('resume');\n          }\n        });\n\n        if (self._suspendTimer) {\n          clearTimeout(self._suspendTimer);\n          self._suspendTimer = null;\n        }\n      } else if (self.state === 'suspending') {\n        self._resumeAfterSuspend = true;\n      }\n\n      return self;\n    }\n  }; // Setup the global audio controller.\n\n  var Howler = new HowlerGlobal();\n  /** Group Methods **/\n\n  /***************************************************************************/\n\n  /**\n   * Create an audio group controller.\n   * @param {Object} o Passed in properties for this group.\n   */\n\n  var Howl = function Howl(o) {\n    var self = this; // Throw an error if no source is provided.\n\n    if (!o.src || o.src.length === 0) {\n      console.error('An array of source files must be passed with any new Howl.');\n      return;\n    }\n\n    self.init(o);\n  };\n\n  Howl.prototype = {\n    /**\n     * Initialize a new Howl group object.\n     * @param  {Object} o Passed in properties for this group.\n     * @return {Howl}\n     */\n    init: function init(o) {\n      var self = this; // If we don't have an AudioContext created yet, run the setup.\n\n      if (!Howler.ctx) {\n        setupAudioContext();\n      } // Setup user-defined default properties.\n\n\n      self._autoplay = o.autoplay || false;\n      self._format = typeof o.format !== 'string' ? o.format : [o.format];\n      self._html5 = o.html5 || false;\n      self._muted = o.mute || false;\n      self._loop = o.loop || false;\n      self._pool = o.pool || 5;\n      self._preload = typeof o.preload === 'boolean' || o.preload === 'metadata' ? o.preload : true;\n      self._rate = o.rate || 1;\n      self._sprite = o.sprite || {};\n      self._src = typeof o.src !== 'string' ? o.src : [o.src];\n      self._volume = o.volume !== undefined ? o.volume : 1;\n      self._xhr = {\n        method: o.xhr && o.xhr.method ? o.xhr.method : 'GET',\n        headers: o.xhr && o.xhr.headers ? o.xhr.headers : null,\n        withCredentials: o.xhr && o.xhr.withCredentials ? o.xhr.withCredentials : false\n      }; // Setup all other default properties.\n\n      self._duration = 0;\n      self._state = 'unloaded';\n      self._sounds = [];\n      self._endTimers = {};\n      self._queue = [];\n      self._playLock = false; // Setup event listeners.\n\n      self._onend = o.onend ? [{\n        fn: o.onend\n      }] : [];\n      self._onfade = o.onfade ? [{\n        fn: o.onfade\n      }] : [];\n      self._onload = o.onload ? [{\n        fn: o.onload\n      }] : [];\n      self._onloaderror = o.onloaderror ? [{\n        fn: o.onloaderror\n      }] : [];\n      self._onplayerror = o.onplayerror ? [{\n        fn: o.onplayerror\n      }] : [];\n      self._onpause = o.onpause ? [{\n        fn: o.onpause\n      }] : [];\n      self._onplay = o.onplay ? [{\n        fn: o.onplay\n      }] : [];\n      self._onstop = o.onstop ? [{\n        fn: o.onstop\n      }] : [];\n      self._onmute = o.onmute ? [{\n        fn: o.onmute\n      }] : [];\n      self._onvolume = o.onvolume ? [{\n        fn: o.onvolume\n      }] : [];\n      self._onrate = o.onrate ? [{\n        fn: o.onrate\n      }] : [];\n      self._onseek = o.onseek ? [{\n        fn: o.onseek\n      }] : [];\n      self._onunlock = o.onunlock ? [{\n        fn: o.onunlock\n      }] : [];\n      self._onresume = []; // Web Audio or HTML5 Audio?\n\n      self._webAudio = Howler.usingWebAudio && !self._html5; // Automatically try to enable audio.\n\n      if (typeof Howler.ctx !== 'undefined' && Howler.ctx && Howler.autoUnlock) {\n        Howler._unlockAudio();\n      } // Keep track of this Howl group in the global controller.\n\n\n      Howler._howls.push(self); // If they selected autoplay, add a play event to the load queue.\n\n\n      if (self._autoplay) {\n        self._queue.push({\n          event: 'play',\n          action: function action() {\n            self.play();\n          }\n        });\n      } // Load the source file unless otherwise specified.\n\n\n      if (self._preload && self._preload !== 'none') {\n        self.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Load the audio file.\n     * @return {Howler}\n     */\n    load: function load() {\n      var self = this;\n      var url = null; // If no audio is available, quit immediately.\n\n      if (Howler.noAudio) {\n        self._emit('loaderror', null, 'No audio support.');\n\n        return;\n      } // Make sure our source is in an array.\n\n\n      if (typeof self._src === 'string') {\n        self._src = [self._src];\n      } // Loop through the sources and pick the first one that is compatible.\n\n\n      for (var i = 0; i < self._src.length; i++) {\n        var ext, str;\n\n        if (self._format && self._format[i]) {\n          // If an extension was specified, use that instead.\n          ext = self._format[i];\n        } else {\n          // Make sure the source is a string.\n          str = self._src[i];\n\n          if (typeof str !== 'string') {\n            self._emit('loaderror', null, 'Non-string found in selected audio sources - ignoring.');\n\n            continue;\n          } // Extract the file extension from the URL or base64 data URI.\n\n\n          ext = /^data:audio\\/([^;,]+);/i.exec(str);\n\n          if (!ext) {\n            ext = /\\.([^.]+)$/.exec(str.split('?', 1)[0]);\n          }\n\n          if (ext) {\n            ext = ext[1].toLowerCase();\n          }\n        } // Log a warning if no extension was found.\n\n\n        if (!ext) {\n          console.warn('No file extension was found. Consider using the \"format\" property or specify an extension.');\n        } // Check if this extension is available.\n\n\n        if (ext && Howler.codecs(ext)) {\n          url = self._src[i];\n          break;\n        }\n      }\n\n      if (!url) {\n        self._emit('loaderror', null, 'No codec support for selected audio sources.');\n\n        return;\n      }\n\n      self._src = url;\n      self._state = 'loading'; // If the hosting page is HTTPS and the source isn't,\n      // drop down to HTML5 Audio to avoid Mixed Content errors.\n\n      if (window.location.protocol === 'https:' && url.slice(0, 5) === 'http:') {\n        self._html5 = true;\n        self._webAudio = false;\n      } // Create a new sound object and add it to the pool.\n\n\n      new Sound(self); // Load and decode the audio data for playback.\n\n      if (self._webAudio) {\n        loadBuffer(self);\n      }\n\n      return self;\n    },\n\n    /**\n     * Play a sound or resume previous playback.\n     * @param  {String/Number} sprite   Sprite name for sprite playback or sound id to continue previous.\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Number}          Sound ID.\n     */\n    play: function play(sprite, internal) {\n      var self = this;\n      var id = null; // Determine if a sprite, sound id or nothing was passed\n\n      if (typeof sprite === 'number') {\n        id = sprite;\n        sprite = null;\n      } else if (typeof sprite === 'string' && self._state === 'loaded' && !self._sprite[sprite]) {\n        // If the passed sprite doesn't exist, do nothing.\n        return null;\n      } else if (typeof sprite === 'undefined') {\n        // Use the default sound sprite (plays the full audio length).\n        sprite = '__default'; // Check if there is a single paused sound that isn't ended.\n        // If there is, play that sound. If not, continue as usual.\n\n        if (!self._playLock) {\n          var num = 0;\n\n          for (var i = 0; i < self._sounds.length; i++) {\n            if (self._sounds[i]._paused && !self._sounds[i]._ended) {\n              num++;\n              id = self._sounds[i]._id;\n            }\n          }\n\n          if (num === 1) {\n            sprite = null;\n          } else {\n            id = null;\n          }\n        }\n      } // Get the selected node, or get one from the pool.\n\n\n      var sound = id ? self._soundById(id) : self._inactiveSound(); // If the sound doesn't exist, do nothing.\n\n      if (!sound) {\n        return null;\n      } // Select the sprite definition.\n\n\n      if (id && !sprite) {\n        sprite = sound._sprite || '__default';\n      } // If the sound hasn't loaded, we must wait to get the audio's duration.\n      // We also need to wait to make sure we don't run into race conditions with\n      // the order of function calls.\n\n\n      if (self._state !== 'loaded') {\n        // Set the sprite value on this sound.\n        sound._sprite = sprite; // Mark this sound as not ended in case another sound is played before this one loads.\n\n        sound._ended = false; // Add the sound to the queue to be played on load.\n\n        var soundId = sound._id;\n\n        self._queue.push({\n          event: 'play',\n          action: function action() {\n            self.play(soundId);\n          }\n        });\n\n        return soundId;\n      } // Don't play the sound if an id was passed and it is already playing.\n\n\n      if (id && !sound._paused) {\n        // Trigger the play event, in order to keep iterating through queue.\n        if (!internal) {\n          self._loadQueue('play');\n        }\n\n        return sound._id;\n      } // Make sure the AudioContext isn't suspended, and resume it if it is.\n\n\n      if (self._webAudio) {\n        Howler._autoResume();\n      } // Determine how long to play for and where to start playing.\n\n\n      var seek = Math.max(0, sound._seek > 0 ? sound._seek : self._sprite[sprite][0] / 1000);\n      var duration = Math.max(0, (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000 - seek);\n      var timeout = duration * 1000 / Math.abs(sound._rate);\n      var start = self._sprite[sprite][0] / 1000;\n      var stop = (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000;\n      sound._sprite = sprite; // Mark the sound as ended instantly so that this async playback\n      // doesn't get grabbed by another call to play while this one waits to start.\n\n      sound._ended = false; // Update the parameters of the sound.\n\n      var setParams = function setParams() {\n        sound._paused = false;\n        sound._seek = seek;\n        sound._start = start;\n        sound._stop = stop;\n        sound._loop = !!(sound._loop || self._sprite[sprite][2]);\n      }; // End the sound instantly if seek is at the end.\n\n\n      if (seek >= stop) {\n        self._ended(sound);\n\n        return;\n      } // Begin the actual playback.\n\n\n      var node = sound._node;\n\n      if (self._webAudio) {\n        // Fire this when the sound is ready to play to begin Web Audio playback.\n        var playWebAudio = function playWebAudio() {\n          self._playLock = false;\n          setParams();\n\n          self._refreshBuffer(sound); // Setup the playback params.\n\n\n          var vol = sound._muted || self._muted ? 0 : sound._volume;\n          node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n          sound._playStart = Howler.ctx.currentTime; // Play the sound using the supported method.\n\n          if (typeof node.bufferSource.start === 'undefined') {\n            sound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);\n          } else {\n            sound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);\n          } // Start a new timer if none is present.\n\n\n          if (timeout !== Infinity) {\n            self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n          }\n\n          if (!internal) {\n            setTimeout(function () {\n              self._emit('play', sound._id);\n\n              self._loadQueue();\n            }, 0);\n          }\n        };\n\n        if (Howler.state === 'running' && Howler.ctx.state !== 'interrupted') {\n          playWebAudio();\n        } else {\n          self._playLock = true; // Wait for the audio context to resume before playing.\n\n          self.once('resume', playWebAudio); // Cancel the end timer.\n\n          self._clearTimer(sound._id);\n        }\n      } else {\n        // Fire this when the sound is ready to play to begin HTML5 Audio playback.\n        var playHtml5 = function playHtml5() {\n          node.currentTime = seek;\n          node.muted = sound._muted || self._muted || Howler._muted || node.muted;\n          node.volume = sound._volume * Howler.volume();\n          node.playbackRate = sound._rate; // Some browsers will throw an error if this is called without user interaction.\n\n          try {\n            var play = node.play(); // Support older browsers that don't support promises, and thus don't have this issue.\n\n            if (play && typeof Promise !== 'undefined' && (play instanceof Promise || typeof play.then === 'function')) {\n              // Implements a lock to prevent DOMException: The play() request was interrupted by a call to pause().\n              self._playLock = true; // Set param values immediately.\n\n              setParams(); // Releases the lock and executes queued actions.\n\n              play.then(function () {\n                self._playLock = false;\n                node._unlocked = true;\n\n                if (!internal) {\n                  self._emit('play', sound._id);\n                } else {\n                  self._loadQueue();\n                }\n              }).catch(function () {\n                self._playLock = false;\n\n                self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' + 'on mobile devices and Chrome where playback was not within a user interaction.'); // Reset the ended and paused values.\n\n\n                sound._ended = true;\n                sound._paused = true;\n              });\n            } else if (!internal) {\n              self._playLock = false;\n              setParams();\n\n              self._emit('play', sound._id);\n            } // Setting rate before playing won't work in IE, so we set it again here.\n\n\n            node.playbackRate = sound._rate; // If the node is still paused, then we can assume there was a playback issue.\n\n            if (node.paused) {\n              self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' + 'on mobile devices and Chrome where playback was not within a user interaction.');\n\n              return;\n            } // Setup the end timer on sprites or listen for the ended event.\n\n\n            if (sprite !== '__default' || sound._loop) {\n              self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n            } else {\n              self._endTimers[sound._id] = function () {\n                // Fire ended on this audio node.\n                self._ended(sound); // Clear this listener.\n\n\n                node.removeEventListener('ended', self._endTimers[sound._id], false);\n              };\n\n              node.addEventListener('ended', self._endTimers[sound._id], false);\n            }\n          } catch (err) {\n            self._emit('playerror', sound._id, err);\n          }\n        }; // If this is streaming audio, make sure the src is set and load again.\n\n\n        if (node.src === 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA') {\n          node.src = self._src;\n          node.load();\n        } // Play immediately if ready, or wait for the 'canplaythrough'e vent.\n\n\n        var loadedNoReadyState = window && window.ejecta || !node.readyState && Howler._navigator.isCocoonJS;\n\n        if (node.readyState >= 3 || loadedNoReadyState) {\n          playHtml5();\n        } else {\n          self._playLock = true;\n          self._state = 'loading';\n\n          var listener = function listener() {\n            self._state = 'loaded'; // Begin playback.\n\n            playHtml5(); // Clear this listener.\n\n            node.removeEventListener(Howler._canPlayEvent, listener, false);\n          };\n\n          node.addEventListener(Howler._canPlayEvent, listener, false); // Cancel the end timer.\n\n          self._clearTimer(sound._id);\n        }\n      }\n\n      return sound._id;\n    },\n\n    /**\n     * Pause playback and save current position.\n     * @param  {Number} id The sound ID (empty to pause all in group).\n     * @return {Howl}\n     */\n    pause: function pause(id) {\n      var self = this; // If the sound hasn't loaded or a play() promise is pending, add it to the load queue to pause when capable.\n\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'pause',\n          action: function action() {\n            self.pause(id);\n          }\n        });\n\n        return self;\n      } // If no id is passed, get all ID's to be paused.\n\n\n      var ids = self._getSoundIds(id);\n\n      for (var i = 0; i < ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]); // Get the sound.\n\n\n        var sound = self._soundById(ids[i]);\n\n        if (sound && !sound._paused) {\n          // Reset the seek position.\n          sound._seek = self.seek(ids[i]);\n          sound._rateSeek = 0;\n          sound._paused = true; // Stop currently running fades.\n\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound has been created.\n              if (!sound._node.bufferSource) {\n                continue;\n              }\n\n              if (typeof sound._node.bufferSource.stop === 'undefined') {\n                sound._node.bufferSource.noteOff(0);\n              } else {\n                sound._node.bufferSource.stop(0);\n              } // Clean up the buffer source.\n\n\n              self._cleanBuffer(sound._node);\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.pause();\n            }\n          }\n        } // Fire the pause event, unless `true` is passed as the 2nd argument.\n\n\n        if (!arguments[1]) {\n          self._emit('pause', sound ? sound._id : null);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Stop playback and reset to start.\n     * @param  {Number} id The sound ID (empty to stop all in group).\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Howl}\n     */\n    stop: function stop(id, internal) {\n      var self = this; // If the sound hasn't loaded, add it to the load queue to stop when capable.\n\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'stop',\n          action: function action() {\n            self.stop(id);\n          }\n        });\n\n        return self;\n      } // If no id is passed, get all ID's to be stopped.\n\n\n      var ids = self._getSoundIds(id);\n\n      for (var i = 0; i < ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]); // Get the sound.\n\n\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          // Reset the seek position.\n          sound._seek = sound._start || 0;\n          sound._rateSeek = 0;\n          sound._paused = true;\n          sound._ended = true; // Stop currently running fades.\n\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound's AudioBufferSourceNode has been created.\n              if (sound._node.bufferSource) {\n                if (typeof sound._node.bufferSource.stop === 'undefined') {\n                  sound._node.bufferSource.noteOff(0);\n                } else {\n                  sound._node.bufferSource.stop(0);\n                } // Clean up the buffer source.\n\n\n                self._cleanBuffer(sound._node);\n              }\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.currentTime = sound._start || 0;\n\n              sound._node.pause(); // If this is a live stream, stop download once the audio is stopped.\n\n\n              if (sound._node.duration === Infinity) {\n                self._clearSound(sound._node);\n              }\n            }\n          }\n\n          if (!internal) {\n            self._emit('stop', sound._id);\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Mute/unmute a single sound or all sounds in this Howl group.\n     * @param  {Boolean} muted Set to true to mute and false to unmute.\n     * @param  {Number} id    The sound ID to update (omit to mute/unmute all).\n     * @return {Howl}\n     */\n    mute: function mute(muted, id) {\n      var self = this; // If the sound hasn't loaded, add it to the load queue to mute when capable.\n\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'mute',\n          action: function action() {\n            self.mute(muted, id);\n          }\n        });\n\n        return self;\n      } // If applying mute/unmute to all sounds, update the group's value.\n\n\n      if (typeof id === 'undefined') {\n        if (typeof muted === 'boolean') {\n          self._muted = muted;\n        } else {\n          return self._muted;\n        }\n      } // If no id is passed, get all ID's to be muted.\n\n\n      var ids = self._getSoundIds(id);\n\n      for (var i = 0; i < ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._muted = muted; // Cancel active fade and set the volume to the end value.\n\n          if (sound._interval) {\n            self._stopFade(sound._id);\n          }\n\n          if (self._webAudio && sound._node) {\n            sound._node.gain.setValueAtTime(muted ? 0 : sound._volume, Howler.ctx.currentTime);\n          } else if (sound._node) {\n            sound._node.muted = Howler._muted ? true : muted;\n          }\n\n          self._emit('mute', sound._id);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the volume of this sound or of the Howl group. This method can optionally take 0, 1 or 2 arguments.\n     *   volume() -> Returns the group's volume value.\n     *   volume(id) -> Returns the sound id's current volume.\n     *   volume(vol) -> Sets the volume of all sounds in this Howl group.\n     *   volume(vol, id) -> Sets the volume of passed sound id.\n     * @return {Howl/Number} Returns self or current volume.\n     */\n    volume: function volume() {\n      var self = this;\n      var args = arguments;\n      var vol, id; // Determine the values based on arguments.\n\n      if (args.length === 0) {\n        // Return the value of the groups' volume.\n        return self._volume;\n      } else if (args.length === 1 || args.length === 2 && typeof args[1] === 'undefined') {\n        // First check if this is an ID, and if not, assume it is a new volume.\n        var ids = self._getSoundIds();\n\n        var index = ids.indexOf(args[0]);\n\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          vol = parseFloat(args[0]);\n        }\n      } else if (args.length >= 2) {\n        vol = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      } // Update the volume or return the current volume.\n\n\n      var sound;\n\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        // If the sound hasn't loaded, add it to the load queue to change volume when capable.\n        if (self._state !== 'loaded' || self._playLock) {\n          self._queue.push({\n            event: 'volume',\n            action: function action() {\n              self.volume.apply(self, args);\n            }\n          });\n\n          return self;\n        } // Set the group volume.\n\n\n        if (typeof id === 'undefined') {\n          self._volume = vol;\n        } // Update one or all volumes.\n\n\n        id = self._getSoundIds(id);\n\n        for (var i = 0; i < id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            sound._volume = vol; // Stop currently running fades.\n\n            if (!args[2]) {\n              self._stopFade(id[i]);\n            }\n\n            if (self._webAudio && sound._node && !sound._muted) {\n              sound._node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n            } else if (sound._node && !sound._muted) {\n              sound._node.volume = vol * Howler.volume();\n            }\n\n            self._emit('volume', sound._id);\n          }\n        }\n      } else {\n        sound = id ? self._soundById(id) : self._sounds[0];\n        return sound ? sound._volume : 0;\n      }\n\n      return self;\n    },\n\n    /**\n     * Fade a currently playing sound between two volumes (if no id is passed, all sounds will fade).\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id (omit to fade all sounds).\n     * @return {Howl}\n     */\n    fade: function fade(from, to, len, id) {\n      var self = this; // If the sound hasn't loaded, add it to the load queue to fade when capable.\n\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'fade',\n          action: function action() {\n            self.fade(from, to, len, id);\n          }\n        });\n\n        return self;\n      } // Make sure the to/from/len values are numbers.\n\n\n      from = Math.min(Math.max(0, parseFloat(from)), 1);\n      to = Math.min(Math.max(0, parseFloat(to)), 1);\n      len = parseFloat(len); // Set the volume to the start position.\n\n      self.volume(from, id); // Fade the volume of one or all sounds.\n\n      var ids = self._getSoundIds(id);\n\n      for (var i = 0; i < ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]); // Create a linear fade or fall back to timeouts with HTML5 Audio.\n\n\n        if (sound) {\n          // Stop the previous fade if no sprite is being used (otherwise, volume handles this).\n          if (!id) {\n            self._stopFade(ids[i]);\n          } // If we are using Web Audio, let the native methods do the actual fade.\n\n\n          if (self._webAudio && !sound._muted) {\n            var currentTime = Howler.ctx.currentTime;\n            var end = currentTime + len / 1000;\n            sound._volume = from;\n\n            sound._node.gain.setValueAtTime(from, currentTime);\n\n            sound._node.gain.linearRampToValueAtTime(to, end);\n          }\n\n          self._startFadeInterval(sound, from, to, len, ids[i], typeof id === 'undefined');\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Starts the internal interval to fade a sound.\n     * @param  {Object} sound Reference to sound to fade.\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id to fade.\n     * @param  {Boolean} isGroup   If true, set the volume on the group.\n     */\n    _startFadeInterval: function _startFadeInterval(sound, from, to, len, id, isGroup) {\n      var self = this;\n      var vol = from;\n      var diff = to - from;\n      var steps = Math.abs(diff / 0.01);\n      var stepLen = Math.max(4, steps > 0 ? len / steps : len);\n      var lastTick = Date.now(); // Store the value being faded to.\n\n      sound._fadeTo = to; // Update the volume value on each interval tick.\n\n      sound._interval = setInterval(function () {\n        // Update the volume based on the time since the last tick.\n        var tick = (Date.now() - lastTick) / len;\n        lastTick = Date.now();\n        vol += diff * tick; // Round to within 2 decimal points.\n\n        vol = Math.round(vol * 100) / 100; // Make sure the volume is in the right bounds.\n\n        if (diff < 0) {\n          vol = Math.max(to, vol);\n        } else {\n          vol = Math.min(to, vol);\n        } // Change the volume.\n\n\n        if (self._webAudio) {\n          sound._volume = vol;\n        } else {\n          self.volume(vol, sound._id, true);\n        } // Set the group's volume.\n\n\n        if (isGroup) {\n          self._volume = vol;\n        } // When the fade is complete, stop it and fire event.\n\n\n        if (to < from && vol <= to || to > from && vol >= to) {\n          clearInterval(sound._interval);\n          sound._interval = null;\n          sound._fadeTo = null;\n          self.volume(to, sound._id);\n\n          self._emit('fade', sound._id);\n        }\n      }, stepLen);\n    },\n\n    /**\n     * Internal method that stops the currently playing fade when\n     * a new fade starts, volume is changed or the sound is stopped.\n     * @param  {Number} id The sound id.\n     * @return {Howl}\n     */\n    _stopFade: function _stopFade(id) {\n      var self = this;\n\n      var sound = self._soundById(id);\n\n      if (sound && sound._interval) {\n        if (self._webAudio) {\n          sound._node.gain.cancelScheduledValues(Howler.ctx.currentTime);\n        }\n\n        clearInterval(sound._interval);\n        sound._interval = null;\n        self.volume(sound._fadeTo, id);\n        sound._fadeTo = null;\n\n        self._emit('fade', id);\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the loop parameter on a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   loop() -> Returns the group's loop value.\n     *   loop(id) -> Returns the sound id's loop value.\n     *   loop(loop) -> Sets the loop value for all sounds in this Howl group.\n     *   loop(loop, id) -> Sets the loop value of passed sound id.\n     * @return {Howl/Boolean} Returns self or current loop value.\n     */\n    loop: function loop() {\n      var self = this;\n      var args = arguments;\n      var loop, id, sound; // Determine the values for loop and id.\n\n      if (args.length === 0) {\n        // Return the grou's loop value.\n        return self._loop;\n      } else if (args.length === 1) {\n        if (typeof args[0] === 'boolean') {\n          loop = args[0];\n          self._loop = loop;\n        } else {\n          // Return this sound's loop value.\n          sound = self._soundById(parseInt(args[0], 10));\n          return sound ? sound._loop : false;\n        }\n      } else if (args.length === 2) {\n        loop = args[0];\n        id = parseInt(args[1], 10);\n      } // If no id is passed, get all ID's to be looped.\n\n\n      var ids = self._getSoundIds(id);\n\n      for (var i = 0; i < ids.length; i++) {\n        sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._loop = loop;\n\n          if (self._webAudio && sound._node && sound._node.bufferSource) {\n            sound._node.bufferSource.loop = loop;\n\n            if (loop) {\n              sound._node.bufferSource.loopStart = sound._start || 0;\n              sound._node.bufferSource.loopEnd = sound._stop; // If playing, restart playback to ensure looping updates.\n\n              if (self.playing(ids[i])) {\n                self.pause(ids[i], true);\n                self.play(ids[i], true);\n              }\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the playback rate of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   rate() -> Returns the first sound node's current playback rate.\n     *   rate(id) -> Returns the sound id's current playback rate.\n     *   rate(rate) -> Sets the playback rate of all sounds in this Howl group.\n     *   rate(rate, id) -> Sets the playback rate of passed sound id.\n     * @return {Howl/Number} Returns self or the current playback rate.\n     */\n    rate: function rate() {\n      var self = this;\n      var args = arguments;\n      var rate, id; // Determine the values based on arguments.\n\n      if (args.length === 0) {\n        // We will simply return the current rate of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new rate value.\n        var ids = self._getSoundIds();\n\n        var index = ids.indexOf(args[0]);\n\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          rate = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        rate = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      } // Update the playback rate or return the current value.\n\n\n      var sound;\n\n      if (typeof rate === 'number') {\n        // If the sound hasn't loaded, add it to the load queue to change playback rate when capable.\n        if (self._state !== 'loaded' || self._playLock) {\n          self._queue.push({\n            event: 'rate',\n            action: function action() {\n              self.rate.apply(self, args);\n            }\n          });\n\n          return self;\n        } // Set the group rate.\n\n\n        if (typeof id === 'undefined') {\n          self._rate = rate;\n        } // Update one or all volumes.\n\n\n        id = self._getSoundIds(id);\n\n        for (var i = 0; i < id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            // Keep track of our position when the rate changed and update the playback\n            // start position so we can properly adjust the seek position for time elapsed.\n            if (self.playing(id[i])) {\n              sound._rateSeek = self.seek(id[i]);\n              sound._playStart = self._webAudio ? Howler.ctx.currentTime : sound._playStart;\n            }\n\n            sound._rate = rate; // Change the playback rate.\n\n            if (self._webAudio && sound._node && sound._node.bufferSource) {\n              sound._node.bufferSource.playbackRate.setValueAtTime(rate, Howler.ctx.currentTime);\n            } else if (sound._node) {\n              sound._node.playbackRate = rate;\n            } // Reset the timers.\n\n\n            var seek = self.seek(id[i]);\n            var duration = (self._sprite[sound._sprite][0] + self._sprite[sound._sprite][1]) / 1000 - seek;\n            var timeout = duration * 1000 / Math.abs(sound._rate); // Start a new end timer if sound is already playing.\n\n            if (self._endTimers[id[i]] || !sound._paused) {\n              self._clearTimer(id[i]);\n\n              self._endTimers[id[i]] = setTimeout(self._ended.bind(self, sound), timeout);\n            }\n\n            self._emit('rate', sound._id);\n          }\n        }\n      } else {\n        sound = self._soundById(id);\n        return sound ? sound._rate : self._rate;\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the seek position of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   seek() -> Returns the first sound node's current seek position.\n     *   seek(id) -> Returns the sound id's current seek position.\n     *   seek(seek) -> Sets the seek position of the first sound node.\n     *   seek(seek, id) -> Sets the seek position of passed sound id.\n     * @return {Howl/Number} Returns self or the current seek position.\n     */\n    seek: function seek() {\n      var self = this;\n      var args = arguments;\n      var seek, id; // Determine the values based on arguments.\n\n      if (args.length === 0) {\n        // We will simply return the current position of the first node.\n        if (self._sounds.length) {\n          id = self._sounds[0]._id;\n        }\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new seek position.\n        var ids = self._getSoundIds();\n\n        var index = ids.indexOf(args[0]);\n\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else if (self._sounds.length) {\n          id = self._sounds[0]._id;\n          seek = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        seek = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      } // If there is no ID, bail out.\n\n\n      if (typeof id === 'undefined') {\n        return 0;\n      } // If the sound hasn't loaded, add it to the load queue to seek when capable.\n\n\n      if (typeof seek === 'number' && (self._state !== 'loaded' || self._playLock)) {\n        self._queue.push({\n          event: 'seek',\n          action: function action() {\n            self.seek.apply(self, args);\n          }\n        });\n\n        return self;\n      } // Get the sound.\n\n\n      var sound = self._soundById(id);\n\n      if (sound) {\n        if (typeof seek === 'number' && seek >= 0) {\n          // Pause the sound and update position for restarting playback.\n          var playing = self.playing(id);\n\n          if (playing) {\n            self.pause(id, true);\n          } // Move the position of the track and cancel timer.\n\n\n          sound._seek = seek;\n          sound._ended = false;\n\n          self._clearTimer(id); // Update the seek position for HTML5 Audio.\n\n\n          if (!self._webAudio && sound._node && !isNaN(sound._node.duration)) {\n            sound._node.currentTime = seek;\n          } // Seek and emit when ready.\n\n\n          var seekAndEmit = function seekAndEmit() {\n            // Restart the playback if the sound was playing.\n            if (playing) {\n              self.play(id, true);\n            }\n\n            self._emit('seek', id);\n          }; // Wait for the play lock to be unset before emitting (HTML5 Audio).\n\n\n          if (playing && !self._webAudio) {\n            var emitSeek = function emitSeek() {\n              if (!self._playLock) {\n                seekAndEmit();\n              } else {\n                setTimeout(emitSeek, 0);\n              }\n            };\n\n            setTimeout(emitSeek, 0);\n          } else {\n            seekAndEmit();\n          }\n        } else {\n          if (self._webAudio) {\n            var realTime = self.playing(id) ? Howler.ctx.currentTime - sound._playStart : 0;\n            var rateSeek = sound._rateSeek ? sound._rateSeek - sound._seek : 0;\n            return sound._seek + (rateSeek + realTime * Math.abs(sound._rate));\n          } else {\n            return sound._node.currentTime;\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Check if a specific sound is currently playing or not (if id is provided), or check if at least one of the sounds in the group is playing or not.\n     * @param  {Number}  id The sound id to check. If none is passed, the whole sound group is checked.\n     * @return {Boolean} True if playing and false if not.\n     */\n    playing: function playing(id) {\n      var self = this; // Check the passed sound ID (if any).\n\n      if (typeof id === 'number') {\n        var sound = self._soundById(id);\n\n        return sound ? !sound._paused : false;\n      } // Otherwise, loop through all sounds and check if any are playing.\n\n\n      for (var i = 0; i < self._sounds.length; i++) {\n        if (!self._sounds[i]._paused) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n    /**\n     * Get the duration of this sound. Passing a sound id will return the sprite duration.\n     * @param  {Number} id The sound id to check. If none is passed, return full source duration.\n     * @return {Number} Audio duration in seconds.\n     */\n    duration: function duration(id) {\n      var self = this;\n      var duration = self._duration; // If we pass an ID, get the sound and return the sprite length.\n\n      var sound = self._soundById(id);\n\n      if (sound) {\n        duration = self._sprite[sound._sprite][1] / 1000;\n      }\n\n      return duration;\n    },\n\n    /**\n     * Returns the current loaded state of this Howl.\n     * @return {String} 'unloaded', 'loading', 'loaded'\n     */\n    state: function state() {\n      return this._state;\n    },\n\n    /**\n     * Unload and destroy the current Howl object.\n     * This will immediately stop all sound instances attached to this group.\n     */\n    unload: function unload() {\n      var self = this; // Stop playing any active sounds.\n\n      var sounds = self._sounds;\n\n      for (var i = 0; i < sounds.length; i++) {\n        // Stop the sound if it is currently playing.\n        if (!sounds[i]._paused) {\n          self.stop(sounds[i]._id);\n        } // Remove the source or disconnect.\n\n\n        if (!self._webAudio) {\n          // Set the source to 0-second silence to stop any downloading (except in IE).\n          self._clearSound(sounds[i]._node); // Remove any event listeners.\n\n\n          sounds[i]._node.removeEventListener('error', sounds[i]._errorFn, false);\n\n          sounds[i]._node.removeEventListener(Howler._canPlayEvent, sounds[i]._loadFn, false);\n\n          sounds[i]._node.removeEventListener('ended', sounds[i]._endFn, false); // Release the Audio object back to the pool.\n\n\n          Howler._releaseHtml5Audio(sounds[i]._node);\n        } // Empty out all of the nodes.\n\n\n        delete sounds[i]._node; // Make sure all timers are cleared out.\n\n        self._clearTimer(sounds[i]._id);\n      } // Remove the references in the global Howler object.\n\n\n      var index = Howler._howls.indexOf(self);\n\n      if (index >= 0) {\n        Howler._howls.splice(index, 1);\n      } // Delete this sound from the cache (if no other Howl is using it).\n\n\n      var remCache = true;\n\n      for (i = 0; i < Howler._howls.length; i++) {\n        if (Howler._howls[i]._src === self._src || self._src.indexOf(Howler._howls[i]._src) >= 0) {\n          remCache = false;\n          break;\n        }\n      }\n\n      if (cache && remCache) {\n        delete cache[self._src];\n      } // Clear global errors.\n\n\n      Howler.noAudio = false; // Clear out `self`.\n\n      self._state = 'unloaded';\n      self._sounds = [];\n      self = null;\n      return null;\n    },\n\n    /**\n     * Listen to a custom event.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @param  {Number}   once  (INTERNAL) Marks event to fire only once.\n     * @return {Howl}\n     */\n    on: function on(event, fn, id, once) {\n      var self = this;\n      var events = self['_on' + event];\n\n      if (typeof fn === 'function') {\n        events.push(once ? {\n          id: id,\n          fn: fn,\n          once: once\n        } : {\n          id: id,\n          fn: fn\n        });\n      }\n\n      return self;\n    },\n\n    /**\n     * Remove a custom event. Call without parameters to remove all events.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to remove. Leave empty to remove all.\n     * @param  {Number}   id    (optional) Only remove events for this sound.\n     * @return {Howl}\n     */\n    off: function off(event, fn, id) {\n      var self = this;\n      var events = self['_on' + event];\n      var i = 0; // Allow passing just an event and ID.\n\n      if (typeof fn === 'number') {\n        id = fn;\n        fn = null;\n      }\n\n      if (fn || id) {\n        // Loop through event store and remove the passed function.\n        for (i = 0; i < events.length; i++) {\n          var isId = id === events[i].id;\n\n          if (fn === events[i].fn && isId || !fn && isId) {\n            events.splice(i, 1);\n            break;\n          }\n        }\n      } else if (event) {\n        // Clear out all events of this type.\n        self['_on' + event] = [];\n      } else {\n        // Clear out all events of every type.\n        var keys = Object.keys(self);\n\n        for (i = 0; i < keys.length; i++) {\n          if (keys[i].indexOf('_on') === 0 && Array.isArray(self[keys[i]])) {\n            self[keys[i]] = [];\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Listen to a custom event and remove it once fired.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @return {Howl}\n     */\n    once: function once(event, fn, id) {\n      var self = this; // Setup the event listener.\n\n      self.on(event, fn, id, 1);\n      return self;\n    },\n\n    /**\n     * Emit all events of a specific type and pass the sound id.\n     * @param  {String} event Event name.\n     * @param  {Number} id    Sound ID.\n     * @param  {Number} msg   Message to go with event.\n     * @return {Howl}\n     */\n    _emit: function _emit(event, id, msg) {\n      var self = this;\n      var events = self['_on' + event]; // Loop through event store and fire all functions.\n\n      for (var i = events.length - 1; i >= 0; i--) {\n        // Only fire the listener if the correct ID is used.\n        if (!events[i].id || events[i].id === id || event === 'load') {\n          setTimeout(function (fn) {\n            fn.call(this, id, msg);\n          }.bind(self, events[i].fn), 0); // If this event was setup with `once`, remove it.\n\n          if (events[i].once) {\n            self.off(event, events[i].fn, events[i].id);\n          }\n        }\n      } // Pass the event type into load queue so that it can continue stepping.\n\n\n      self._loadQueue(event);\n\n      return self;\n    },\n\n    /**\n     * Queue of actions initiated before the sound has loaded.\n     * These will be called in sequence, with the next only firing\n     * after the previous has finished executing (even if async like play).\n     * @return {Howl}\n     */\n    _loadQueue: function _loadQueue(event) {\n      var self = this;\n\n      if (self._queue.length > 0) {\n        var task = self._queue[0]; // Remove this task if a matching event was passed.\n\n        if (task.event === event) {\n          self._queue.shift();\n\n          self._loadQueue();\n        } // Run the task if no event type is passed.\n\n\n        if (!event) {\n          task.action();\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Fired when playback ends at the end of the duration.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _ended: function _ended(sound) {\n      var self = this;\n      var sprite = sound._sprite; // If we are using IE and there was network latency we may be clipping\n      // audio before it completes playing. Lets check the node to make sure it\n      // believes it has completed, before ending the playback.\n\n      if (!self._webAudio && sound._node && !sound._node.paused && !sound._node.ended && sound._node.currentTime < sound._stop) {\n        setTimeout(self._ended.bind(self, sound), 100);\n        return self;\n      } // Should this sound loop?\n\n\n      var loop = !!(sound._loop || self._sprite[sprite][2]); // Fire the ended event.\n\n      self._emit('end', sound._id); // Restart the playback for HTML5 Audio loop.\n\n\n      if (!self._webAudio && loop) {\n        self.stop(sound._id, true).play(sound._id);\n      } // Restart this timer if on a Web Audio loop.\n\n\n      if (self._webAudio && loop) {\n        self._emit('play', sound._id);\n\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        sound._playStart = Howler.ctx.currentTime;\n        var timeout = (sound._stop - sound._start) * 1000 / Math.abs(sound._rate);\n        self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n      } // Mark the node as paused.\n\n\n      if (self._webAudio && !loop) {\n        sound._paused = true;\n        sound._ended = true;\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n\n        self._clearTimer(sound._id); // Clean up the buffer source.\n\n\n        self._cleanBuffer(sound._node); // Attempt to auto-suspend AudioContext if no sounds are still playing.\n\n\n        Howler._autoSuspend();\n      } // When using a sprite, end the track.\n\n\n      if (!self._webAudio && !loop) {\n        self.stop(sound._id, true);\n      }\n\n      return self;\n    },\n\n    /**\n     * Clear the end timer for a sound playback.\n     * @param  {Number} id The sound ID.\n     * @return {Howl}\n     */\n    _clearTimer: function _clearTimer(id) {\n      var self = this;\n\n      if (self._endTimers[id]) {\n        // Clear the timeout or remove the ended listener.\n        if (typeof self._endTimers[id] !== 'function') {\n          clearTimeout(self._endTimers[id]);\n        } else {\n          var sound = self._soundById(id);\n\n          if (sound && sound._node) {\n            sound._node.removeEventListener('ended', self._endTimers[id], false);\n          }\n        }\n\n        delete self._endTimers[id];\n      }\n\n      return self;\n    },\n\n    /**\n     * Return the sound identified by this ID, or return null.\n     * @param  {Number} id Sound ID\n     * @return {Object}    Sound object or null.\n     */\n    _soundById: function _soundById(id) {\n      var self = this; // Loop through all sounds and find the one with this ID.\n\n      for (var i = 0; i < self._sounds.length; i++) {\n        if (id === self._sounds[i]._id) {\n          return self._sounds[i];\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * Return an inactive sound from the pool or create a new one.\n     * @return {Sound} Sound playback object.\n     */\n    _inactiveSound: function _inactiveSound() {\n      var self = this;\n\n      self._drain(); // Find the first inactive node to recycle.\n\n\n      for (var i = 0; i < self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          return self._sounds[i].reset();\n        }\n      } // If no inactive node was found, create a new one.\n\n\n      return new Sound(self);\n    },\n\n    /**\n     * Drain excess inactive sounds from the pool.\n     */\n    _drain: function _drain() {\n      var self = this;\n      var limit = self._pool;\n      var cnt = 0;\n      var i = 0; // If there are less sounds than the max pool size, we are done.\n\n      if (self._sounds.length < limit) {\n        return;\n      } // Count the number of inactive sounds.\n\n\n      for (i = 0; i < self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          cnt++;\n        }\n      } // Remove excess inactive sounds, going in reverse order.\n\n\n      for (i = self._sounds.length - 1; i >= 0; i--) {\n        if (cnt <= limit) {\n          return;\n        }\n\n        if (self._sounds[i]._ended) {\n          // Disconnect the audio source when using Web Audio.\n          if (self._webAudio && self._sounds[i]._node) {\n            self._sounds[i]._node.disconnect(0);\n          } // Remove sounds until we have the pool size.\n\n\n          self._sounds.splice(i, 1);\n\n          cnt--;\n        }\n      }\n    },\n\n    /**\n     * Get all ID's from the sounds pool.\n     * @param  {Number} id Only return one ID if one is passed.\n     * @return {Array}    Array of IDs.\n     */\n    _getSoundIds: function _getSoundIds(id) {\n      var self = this;\n\n      if (typeof id === 'undefined') {\n        var ids = [];\n\n        for (var i = 0; i < self._sounds.length; i++) {\n          ids.push(self._sounds[i]._id);\n        }\n\n        return ids;\n      } else {\n        return [id];\n      }\n    },\n\n    /**\n     * Load the sound back into the buffer source.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _refreshBuffer: function _refreshBuffer(sound) {\n      var self = this; // Setup the buffer source for playback.\n\n      sound._node.bufferSource = Howler.ctx.createBufferSource();\n      sound._node.bufferSource.buffer = cache[self._src]; // Connect to the correct node.\n\n      if (sound._panner) {\n        sound._node.bufferSource.connect(sound._panner);\n      } else {\n        sound._node.bufferSource.connect(sound._node);\n      } // Setup looping and playback rate.\n\n\n      sound._node.bufferSource.loop = sound._loop;\n\n      if (sound._loop) {\n        sound._node.bufferSource.loopStart = sound._start || 0;\n        sound._node.bufferSource.loopEnd = sound._stop || 0;\n      }\n\n      sound._node.bufferSource.playbackRate.setValueAtTime(sound._rate, Howler.ctx.currentTime);\n\n      return self;\n    },\n\n    /**\n     * Prevent memory leaks by cleaning up the buffer source after playback.\n     * @param  {Object} node Sound's audio node containing the buffer source.\n     * @return {Howl}\n     */\n    _cleanBuffer: function _cleanBuffer(node) {\n      var self = this;\n      var isIOS = Howler._navigator && Howler._navigator.vendor.indexOf('Apple') >= 0;\n\n      if (Howler._scratchBuffer && node.bufferSource) {\n        node.bufferSource.onended = null;\n        node.bufferSource.disconnect(0);\n\n        if (isIOS) {\n          try {\n            node.bufferSource.buffer = Howler._scratchBuffer;\n          } catch (e) {}\n        }\n      }\n\n      node.bufferSource = null;\n      return self;\n    },\n\n    /**\n     * Set the source to a 0-second silence to stop any downloading (except in IE).\n     * @param  {Object} node Audio node to clear.\n     */\n    _clearSound: function _clearSound(node) {\n      var checkIE = /MSIE |Trident\\//.test(Howler._navigator && Howler._navigator.userAgent);\n\n      if (!checkIE) {\n        node.src = 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA';\n      }\n    }\n  };\n  /** Single Sound Methods **/\n\n  /***************************************************************************/\n\n  /**\n   * Setup the sound object, which each node attached to a Howl group is contained in.\n   * @param {Object} howl The Howl parent group.\n   */\n\n  var Sound = function Sound(howl) {\n    this._parent = howl;\n    this.init();\n  };\n\n  Sound.prototype = {\n    /**\n     * Initialize a new Sound object.\n     * @return {Sound}\n     */\n    init: function init() {\n      var self = this;\n      var parent = self._parent; // Setup the default parameters.\n\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default'; // Generate a unique ID for this sound.\n\n      self._id = ++Howler._counter; // Add itself to the parent's pool.\n\n      parent._sounds.push(self); // Create the new node.\n\n\n      self.create();\n      return self;\n    },\n\n    /**\n     * Create and setup a new sound object, whether HTML5 Audio or Web Audio.\n     * @return {Sound}\n     */\n    create: function create() {\n      var self = this;\n      var parent = self._parent;\n      var volume = Howler._muted || self._muted || self._parent._muted ? 0 : self._volume;\n\n      if (parent._webAudio) {\n        // Create the gain node for controlling volume (the source will connect to this).\n        self._node = typeof Howler.ctx.createGain === 'undefined' ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n\n        self._node.gain.setValueAtTime(volume, Howler.ctx.currentTime);\n\n        self._node.paused = true;\n\n        self._node.connect(Howler.masterGain);\n      } else if (!Howler.noAudio) {\n        // Get an unlocked Audio object from the pool.\n        self._node = Howler._obtainHtml5Audio(); // Listen for errors (http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror).\n\n        self._errorFn = self._errorListener.bind(self);\n\n        self._node.addEventListener('error', self._errorFn, false); // Listen for 'canplaythrough' event to let us know the sound is ready.\n\n\n        self._loadFn = self._loadListener.bind(self);\n\n        self._node.addEventListener(Howler._canPlayEvent, self._loadFn, false); // Listen for the 'ended' event on the sound to account for edge-case where\n        // a finite sound has a duration of Infinity.\n\n\n        self._endFn = self._endListener.bind(self);\n\n        self._node.addEventListener('ended', self._endFn, false); // Setup the new audio node.\n\n\n        self._node.src = parent._src;\n        self._node.preload = parent._preload === true ? 'auto' : parent._preload;\n        self._node.volume = volume * Howler.volume(); // Begin loading the source.\n\n        self._node.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Reset the parameters of this sound to the original state (for recycle).\n     * @return {Sound}\n     */\n    reset: function reset() {\n      var self = this;\n      var parent = self._parent; // Reset all of the parameters of this sound.\n\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._rateSeek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default'; // Generate a new ID so that it isn't confused with the previous sound.\n\n      self._id = ++Howler._counter;\n      return self;\n    },\n\n    /**\n     * HTML5 Audio error listener callback.\n     */\n    _errorListener: function _errorListener() {\n      var self = this; // Fire an error event and pass back the code.\n\n      self._parent._emit('loaderror', self._id, self._node.error ? self._node.error.code : 0); // Clear the event listener.\n\n\n      self._node.removeEventListener('error', self._errorFn, false);\n    },\n\n    /**\n     * HTML5 Audio canplaythrough listener callback.\n     */\n    _loadListener: function _loadListener() {\n      var self = this;\n      var parent = self._parent; // Round up the duration to account for the lower precision in HTML5 Audio.\n\n      parent._duration = Math.ceil(self._node.duration * 10) / 10; // Setup a sprite if none is defined.\n\n      if (Object.keys(parent._sprite).length === 0) {\n        parent._sprite = {\n          __default: [0, parent._duration * 1000]\n        };\n      }\n\n      if (parent._state !== 'loaded') {\n        parent._state = 'loaded';\n\n        parent._emit('load');\n\n        parent._loadQueue();\n      } // Clear the event listener.\n\n\n      self._node.removeEventListener(Howler._canPlayEvent, self._loadFn, false);\n    },\n\n    /**\n     * HTML5 Audio ended listener callback.\n     */\n    _endListener: function _endListener() {\n      var self = this;\n      var parent = self._parent; // Only handle the `ended`` event if the duration is Infinity.\n\n      if (parent._duration === Infinity) {\n        // Update the parent duration to match the real audio duration.\n        // Round up the duration to account for the lower precision in HTML5 Audio.\n        parent._duration = Math.ceil(self._node.duration * 10) / 10; // Update the sprite that corresponds to the real duration.\n\n        if (parent._sprite.__default[1] === Infinity) {\n          parent._sprite.__default[1] = parent._duration * 1000;\n        } // Run the regular ended method.\n\n\n        parent._ended(self);\n      } // Clear the event listener since the duration is now correct.\n\n\n      self._node.removeEventListener('ended', self._endFn, false);\n    }\n  };\n  /** Helper Methods **/\n\n  /***************************************************************************/\n\n  var cache = {};\n  /**\n   * Buffer a sound from URL, Data URI or cache and decode to audio source (Web Audio API).\n   * @param  {Howl} self\n   */\n\n  var loadBuffer = function loadBuffer(self) {\n    var url = self._src; // Check if the buffer has already been cached and use it instead.\n\n    if (cache[url]) {\n      // Set the duration from the cache.\n      self._duration = cache[url].duration; // Load the sound into this Howl.\n\n      loadSound(self);\n      return;\n    }\n\n    if (/^data:[^;]+;base64,/.test(url)) {\n      // Decode the base64 data URI without XHR, since some browsers don't support it.\n      var data = atob(url.split(',')[1]);\n      var dataView = new Uint8Array(data.length);\n\n      for (var i = 0; i < data.length; ++i) {\n        dataView[i] = data.charCodeAt(i);\n      }\n\n      decodeAudioData(dataView.buffer, self);\n    } else {\n      // Load the buffer from the URL.\n      var xhr = new XMLHttpRequest();\n      xhr.open(self._xhr.method, url, true);\n      xhr.withCredentials = self._xhr.withCredentials;\n      xhr.responseType = 'arraybuffer'; // Apply any custom headers to the request.\n\n      if (self._xhr.headers) {\n        Object.keys(self._xhr.headers).forEach(function (key) {\n          xhr.setRequestHeader(key, self._xhr.headers[key]);\n        });\n      }\n\n      xhr.onload = function () {\n        // Make sure we get a successful response back.\n        var code = (xhr.status + '')[0];\n\n        if (code !== '0' && code !== '2' && code !== '3') {\n          self._emit('loaderror', null, 'Failed loading audio file with status: ' + xhr.status + '.');\n\n          return;\n        }\n\n        decodeAudioData(xhr.response, self);\n      };\n\n      xhr.onerror = function () {\n        // If there is an error, switch to HTML5 Audio.\n        if (self._webAudio) {\n          self._html5 = true;\n          self._webAudio = false;\n          self._sounds = [];\n          delete cache[url];\n          self.load();\n        }\n      };\n\n      safeXhrSend(xhr);\n    }\n  };\n  /**\n   * Send the XHR request wrapped in a try/catch.\n   * @param  {Object} xhr XHR to send.\n   */\n\n\n  var safeXhrSend = function safeXhrSend(xhr) {\n    try {\n      xhr.send();\n    } catch (e) {\n      xhr.onerror();\n    }\n  };\n  /**\n   * Decode audio data from an array buffer.\n   * @param  {ArrayBuffer} arraybuffer The audio data.\n   * @param  {Howl}        self\n   */\n\n\n  var decodeAudioData = function decodeAudioData(arraybuffer, self) {\n    // Fire a load error if something broke.\n    var error = function error() {\n      self._emit('loaderror', null, 'Decoding audio data failed.');\n    }; // Load the sound on success.\n\n\n    var success = function success(buffer) {\n      if (buffer && self._sounds.length > 0) {\n        cache[self._src] = buffer;\n        loadSound(self, buffer);\n      } else {\n        error();\n      }\n    }; // Decode the buffer into an audio source.\n\n\n    if (typeof Promise !== 'undefined' && Howler.ctx.decodeAudioData.length === 1) {\n      Howler.ctx.decodeAudioData(arraybuffer).then(success).catch(error);\n    } else {\n      Howler.ctx.decodeAudioData(arraybuffer, success, error);\n    }\n  };\n  /**\n   * Sound is now loaded, so finish setting everything up and fire the loaded event.\n   * @param  {Howl} self\n   * @param  {Object} buffer The decoded buffer sound source.\n   */\n\n\n  var loadSound = function loadSound(self, buffer) {\n    // Set the duration.\n    if (buffer && !self._duration) {\n      self._duration = buffer.duration;\n    } // Setup a sprite if none is defined.\n\n\n    if (Object.keys(self._sprite).length === 0) {\n      self._sprite = {\n        __default: [0, self._duration * 1000]\n      };\n    } // Fire the loaded event.\n\n\n    if (self._state !== 'loaded') {\n      self._state = 'loaded';\n\n      self._emit('load');\n\n      self._loadQueue();\n    }\n  };\n  /**\n   * Setup the audio context when available, or switch to HTML5 Audio mode.\n   */\n\n\n  var setupAudioContext = function setupAudioContext() {\n    // If we have already detected that Web Audio isn't supported, don't run this step again.\n    if (!Howler.usingWebAudio) {\n      return;\n    } // Check if we are using Web Audio and setup the AudioContext if we are.\n\n\n    try {\n      if (typeof AudioContext !== 'undefined') {\n        Howler.ctx = new AudioContext();\n      } else if (typeof webkitAudioContext !== 'undefined') {\n        Howler.ctx = new webkitAudioContext();\n      } else {\n        Howler.usingWebAudio = false;\n      }\n    } catch (e) {\n      Howler.usingWebAudio = false;\n    } // If the audio context creation still failed, set using web audio to false.\n\n\n    if (!Howler.ctx) {\n      Howler.usingWebAudio = false;\n    } // Check if a webview is being used on iOS8 or earlier (rather than the browser).\n    // If it is, disable Web Audio as it causes crashing.\n\n\n    var iOS = /iP(hone|od|ad)/.test(Howler._navigator && Howler._navigator.platform);\n\n    var appVersion = Howler._navigator && Howler._navigator.appVersion.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\n\n    var version = appVersion ? parseInt(appVersion[1], 10) : null;\n\n    if (iOS && version && version < 9) {\n      var safari = /safari/.test(Howler._navigator && Howler._navigator.userAgent.toLowerCase());\n\n      if (Howler._navigator && !safari) {\n        Howler.usingWebAudio = false;\n      }\n    } // Create and expose the master GainNode when using Web Audio (useful for plugins or advanced usage).\n\n\n    if (Howler.usingWebAudio) {\n      Howler.masterGain = typeof Howler.ctx.createGain === 'undefined' ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n      Howler.masterGain.gain.setValueAtTime(Howler._muted ? 0 : Howler._volume, Howler.ctx.currentTime);\n      Howler.masterGain.connect(Howler.ctx.destination);\n    } // Re-run the setup on Howler.\n\n\n    Howler._setup();\n  }; // Add support for AMD (Asynchronous Module Definition) libraries such as require.js.\n\n\n  if (typeof define === 'function' && define.amd) {\n    define([], function () {\n      return {\n        Howler: Howler,\n        Howl: Howl\n      };\n    });\n  } // Add support for CommonJS libraries such as browserify.\n\n\n  if (typeof exports !== 'undefined') {\n    exports.Howler = Howler;\n    exports.Howl = Howl;\n  } // Add to global in Node.js (for testing, etc).\n\n\n  if (typeof global !== 'undefined') {\n    global.HowlerGlobal = HowlerGlobal;\n    global.Howler = Howler;\n    global.Howl = Howl;\n    global.Sound = Sound;\n  } else if (typeof window !== 'undefined') {\n    // Define globally in case AMD is not available or unused.\n    window.HowlerGlobal = HowlerGlobal;\n    window.Howler = Howler;\n    window.Howl = Howl;\n    window.Sound = Sound;\n  }\n})();\n/*!\n *  Spatial Plugin - Adds support for stereo and 3D audio where Web Audio is supported.\n *  \n *  howler.js v2.2.3\n *  howlerjs.com\n *\n *  (c) 2013-2020, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n\n(function () {\n  'use strict'; // Setup default properties.\n\n  HowlerGlobal.prototype._pos = [0, 0, 0];\n  HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];\n  /** Global Methods **/\n\n  /***************************************************************************/\n\n  /**\n   * Helper method to update the stereo panning position of all current Howls.\n   * Future Howls will not use this value unless explicitly set.\n   * @param  {Number} pan A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @return {Howler/Number}     Self or current stereo panning value.\n   */\n\n  HowlerGlobal.prototype.stereo = function (pan) {\n    var self = this; // Stop right here if not using Web Audio.\n\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    } // Loop through all Howls and update their stereo panning.\n\n\n    for (var i = self._howls.length - 1; i >= 0; i--) {\n      self._howls[i].stereo(pan);\n    }\n\n    return self;\n  };\n  /**\n   * Get/set the position of the listener in 3D cartesian space. Sounds using\n   * 3D position will be relative to the listener's position.\n   * @param  {Number} x The x-position of the listener.\n   * @param  {Number} y The y-position of the listener.\n   * @param  {Number} z The z-position of the listener.\n   * @return {Howler/Array}   Self or current listener position.\n   */\n\n\n  HowlerGlobal.prototype.pos = function (x, y, z) {\n    var self = this; // Stop right here if not using Web Audio.\n\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    } // Set the defaults for optional 'y' & 'z'.\n\n\n    y = typeof y !== 'number' ? self._pos[1] : y;\n    z = typeof z !== 'number' ? self._pos[2] : z;\n\n    if (typeof x === 'number') {\n      self._pos = [x, y, z];\n\n      if (typeof self.ctx.listener.positionX !== 'undefined') {\n        self.ctx.listener.positionX.setTargetAtTime(self._pos[0], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionY.setTargetAtTime(self._pos[1], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionZ.setTargetAtTime(self._pos[2], Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setPosition(self._pos[0], self._pos[1], self._pos[2]);\n      }\n    } else {\n      return self._pos;\n    }\n\n    return self;\n  };\n  /**\n   * Get/set the direction the listener is pointing in the 3D cartesian space.\n   * A front and up vector must be provided. The front is the direction the\n   * face of the listener is pointing, and up is the direction the top of the\n   * listener is pointing. Thus, these values are expected to be at right angles\n   * from each other.\n   * @param  {Number} x   The x-orientation of the listener.\n   * @param  {Number} y   The y-orientation of the listener.\n   * @param  {Number} z   The z-orientation of the listener.\n   * @param  {Number} xUp The x-orientation of the top of the listener.\n   * @param  {Number} yUp The y-orientation of the top of the listener.\n   * @param  {Number} zUp The z-orientation of the top of the listener.\n   * @return {Howler/Array}     Returns self or the current orientation vectors.\n   */\n\n\n  HowlerGlobal.prototype.orientation = function (x, y, z, xUp, yUp, zUp) {\n    var self = this; // Stop right here if not using Web Audio.\n\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    } // Set the defaults for optional 'y' & 'z'.\n\n\n    var or = self._orientation;\n    y = typeof y !== 'number' ? or[1] : y;\n    z = typeof z !== 'number' ? or[2] : z;\n    xUp = typeof xUp !== 'number' ? or[3] : xUp;\n    yUp = typeof yUp !== 'number' ? or[4] : yUp;\n    zUp = typeof zUp !== 'number' ? or[5] : zUp;\n\n    if (typeof x === 'number') {\n      self._orientation = [x, y, z, xUp, yUp, zUp];\n\n      if (typeof self.ctx.listener.forwardX !== 'undefined') {\n        self.ctx.listener.forwardX.setTargetAtTime(x, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardY.setTargetAtTime(y, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardZ.setTargetAtTime(z, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upX.setTargetAtTime(xUp, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upY.setTargetAtTime(yUp, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upZ.setTargetAtTime(zUp, Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setOrientation(x, y, z, xUp, yUp, zUp);\n      }\n    } else {\n      return or;\n    }\n\n    return self;\n  };\n  /** Group Methods **/\n\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core init.\n   * @param  {Function} _super Core init method.\n   * @return {Howl}\n   */\n\n\n  Howl.prototype.init = function (_super) {\n    return function (o) {\n      var self = this; // Setup user-defined default properties.\n\n      self._orientation = o.orientation || [1, 0, 0];\n      self._stereo = o.stereo || null;\n      self._pos = o.pos || null;\n      self._pannerAttr = {\n        coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : 360,\n        coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : 360,\n        coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : 0,\n        distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : 'inverse',\n        maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : 10000,\n        panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : 'HRTF',\n        refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : 1,\n        rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : 1\n      }; // Setup event listeners.\n\n      self._onstereo = o.onstereo ? [{\n        fn: o.onstereo\n      }] : [];\n      self._onpos = o.onpos ? [{\n        fn: o.onpos\n      }] : [];\n      self._onorientation = o.onorientation ? [{\n        fn: o.onorientation\n      }] : []; // Complete initilization with howler.js core's init function.\n\n      return _super.call(this, o);\n    };\n  }(Howl.prototype.init);\n  /**\n   * Get/set the stereo panning of the audio source for this sound or all in the group.\n   * @param  {Number} pan  A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Number}    Returns self or the current stereo panning value.\n   */\n\n\n  Howl.prototype.stereo = function (pan, id) {\n    var self = this; // Stop right here if not using Web Audio.\n\n    if (!self._webAudio) {\n      return self;\n    } // If the sound hasn't loaded, add it to the load queue to change stereo pan when capable.\n\n\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'stereo',\n        action: function action() {\n          self.stereo(pan, id);\n        }\n      });\n\n      return self;\n    } // Check for PannerStereoNode support and fallback to PannerNode if it doesn't exist.\n\n\n    var pannerType = typeof Howler.ctx.createStereoPanner === 'undefined' ? 'spatial' : 'stereo'; // Setup the group's stereo panning if no ID is passed.\n\n    if (typeof id === 'undefined') {\n      // Return the group's stereo panning if no parameters are passed.\n      if (typeof pan === 'number') {\n        self._stereo = pan;\n        self._pos = [pan, 0, 0];\n      } else {\n        return self._stereo;\n      }\n    } // Change the streo panning of one or all sounds in group.\n\n\n    var ids = self._getSoundIds(id);\n\n    for (var i = 0; i < ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof pan === 'number') {\n          sound._stereo = pan;\n          sound._pos = [pan, 0, 0];\n\n          if (sound._node) {\n            // If we are falling back, make sure the panningModel is equalpower.\n            sound._pannerAttr.panningModel = 'equalpower'; // Check if there is a panner setup and create a new one if not.\n\n            if (!sound._panner || !sound._panner.pan) {\n              setupPanner(sound, pannerType);\n            }\n\n            if (pannerType === 'spatial') {\n              if (typeof sound._panner.positionX !== 'undefined') {\n                sound._panner.positionX.setValueAtTime(pan, Howler.ctx.currentTime);\n\n                sound._panner.positionY.setValueAtTime(0, Howler.ctx.currentTime);\n\n                sound._panner.positionZ.setValueAtTime(0, Howler.ctx.currentTime);\n              } else {\n                sound._panner.setPosition(pan, 0, 0);\n              }\n            } else {\n              sound._panner.pan.setValueAtTime(pan, Howler.ctx.currentTime);\n            }\n          }\n\n          self._emit('stereo', sound._id);\n        } else {\n          return sound._stereo;\n        }\n      }\n    }\n\n    return self;\n  };\n  /**\n   * Get/set the 3D spatial position of the audio source for this sound or group relative to the global listener.\n   * @param  {Number} x  The x-position of the audio source.\n   * @param  {Number} y  The y-position of the audio source.\n   * @param  {Number} z  The z-position of the audio source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial position: [x, y, z].\n   */\n\n\n  Howl.prototype.pos = function (x, y, z, id) {\n    var self = this; // Stop right here if not using Web Audio.\n\n    if (!self._webAudio) {\n      return self;\n    } // If the sound hasn't loaded, add it to the load queue to change position when capable.\n\n\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'pos',\n        action: function action() {\n          self.pos(x, y, z, id);\n        }\n      });\n\n      return self;\n    } // Set the defaults for optional 'y' & 'z'.\n\n\n    y = typeof y !== 'number' ? 0 : y;\n    z = typeof z !== 'number' ? -0.5 : z; // Setup the group's spatial position if no ID is passed.\n\n    if (typeof id === 'undefined') {\n      // Return the group's spatial position if no parameters are passed.\n      if (typeof x === 'number') {\n        self._pos = [x, y, z];\n      } else {\n        return self._pos;\n      }\n    } // Change the spatial position of one or all sounds in group.\n\n\n    var ids = self._getSoundIds(id);\n\n    for (var i = 0; i < ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._pos = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || sound._panner.pan) {\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.positionX !== 'undefined') {\n              sound._panner.positionX.setValueAtTime(x, Howler.ctx.currentTime);\n\n              sound._panner.positionY.setValueAtTime(y, Howler.ctx.currentTime);\n\n              sound._panner.positionZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setPosition(x, y, z);\n            }\n          }\n\n          self._emit('pos', sound._id);\n        } else {\n          return sound._pos;\n        }\n      }\n    }\n\n    return self;\n  };\n  /**\n   * Get/set the direction the audio source is pointing in the 3D cartesian coordinate\n   * space. Depending on how direction the sound is, based on the `cone` attributes,\n   * a sound pointing away from the listener can be quiet or silent.\n   * @param  {Number} x  The x-orientation of the source.\n   * @param  {Number} y  The y-orientation of the source.\n   * @param  {Number} z  The z-orientation of the source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial orientation: [x, y, z].\n   */\n\n\n  Howl.prototype.orientation = function (x, y, z, id) {\n    var self = this; // Stop right here if not using Web Audio.\n\n    if (!self._webAudio) {\n      return self;\n    } // If the sound hasn't loaded, add it to the load queue to change orientation when capable.\n\n\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'orientation',\n        action: function action() {\n          self.orientation(x, y, z, id);\n        }\n      });\n\n      return self;\n    } // Set the defaults for optional 'y' & 'z'.\n\n\n    y = typeof y !== 'number' ? self._orientation[1] : y;\n    z = typeof z !== 'number' ? self._orientation[2] : z; // Setup the group's spatial orientation if no ID is passed.\n\n    if (typeof id === 'undefined') {\n      // Return the group's spatial orientation if no parameters are passed.\n      if (typeof x === 'number') {\n        self._orientation = [x, y, z];\n      } else {\n        return self._orientation;\n      }\n    } // Change the spatial orientation of one or all sounds in group.\n\n\n    var ids = self._getSoundIds(id);\n\n    for (var i = 0; i < ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._orientation = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner) {\n              // Make sure we have a position to setup the node with.\n              if (!sound._pos) {\n                sound._pos = self._pos || [0, 0, -0.5];\n              }\n\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.orientationX !== 'undefined') {\n              sound._panner.orientationX.setValueAtTime(x, Howler.ctx.currentTime);\n\n              sound._panner.orientationY.setValueAtTime(y, Howler.ctx.currentTime);\n\n              sound._panner.orientationZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setOrientation(x, y, z);\n            }\n          }\n\n          self._emit('orientation', sound._id);\n        } else {\n          return sound._orientation;\n        }\n      }\n    }\n\n    return self;\n  };\n  /**\n   * Get/set the panner node's attributes for a sound or group of sounds.\n   * This method can optionall take 0, 1 or 2 arguments.\n   *   pannerAttr() -> Returns the group's values.\n   *   pannerAttr(id) -> Returns the sound id's values.\n   *   pannerAttr(o) -> Set's the values of all sounds in this Howl group.\n   *   pannerAttr(o, id) -> Set's the values of passed sound id.\n   *\n   *   Attributes:\n   *     coneInnerAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      inside of which there will be no volume reduction.\n   *     coneOuterAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      outside of which the volume will be reduced to a constant value of `coneOuterGain`.\n   *     coneOuterGain - (0 by default) A parameter for directional audio sources, this is the gain outside of the\n   *                     `coneOuterAngle`. It is a linear value in the range `[0, 1]`.\n   *     distanceModel - ('inverse' by default) Determines algorithm used to reduce volume as audio moves away from\n   *                     listener. Can be `linear`, `inverse` or `exponential.\n   *     maxDistance - (10000 by default) The maximum distance between source and listener, after which the volume\n   *                   will not be reduced any further.\n   *     refDistance - (1 by default) A reference distance for reducing volume as source moves further from the listener.\n   *                   This is simply a variable of the distance model and has a different effect depending on which model\n   *                   is used and the scale of your coordinates. Generally, volume will be equal to 1 at this distance.\n   *     rolloffFactor - (1 by default) How quickly the volume reduces as source moves from listener. This is simply a\n   *                     variable of the distance model and can be in the range of `[0, 1]` with `linear` and `[0, ∞]`\n   *                     with `inverse` and `exponential`.\n   *     panningModel - ('HRTF' by default) Determines which spatialization algorithm is used to position audio.\n   *                     Can be `HRTF` or `equalpower`.\n   *\n   * @return {Howl/Object} Returns self or current panner attributes.\n   */\n\n\n  Howl.prototype.pannerAttr = function () {\n    var self = this;\n    var args = arguments;\n    var o, id, sound; // Stop right here if not using Web Audio.\n\n    if (!self._webAudio) {\n      return self;\n    } // Determine the values based on arguments.\n\n\n    if (args.length === 0) {\n      // Return the group's panner attribute values.\n      return self._pannerAttr;\n    } else if (args.length === 1) {\n      if (typeof args[0] === 'object') {\n        o = args[0]; // Set the grou's panner attribute values.\n\n        if (typeof id === 'undefined') {\n          if (!o.pannerAttr) {\n            o.pannerAttr = {\n              coneInnerAngle: o.coneInnerAngle,\n              coneOuterAngle: o.coneOuterAngle,\n              coneOuterGain: o.coneOuterGain,\n              distanceModel: o.distanceModel,\n              maxDistance: o.maxDistance,\n              refDistance: o.refDistance,\n              rolloffFactor: o.rolloffFactor,\n              panningModel: o.panningModel\n            };\n          }\n\n          self._pannerAttr = {\n            coneInnerAngle: typeof o.pannerAttr.coneInnerAngle !== 'undefined' ? o.pannerAttr.coneInnerAngle : self._coneInnerAngle,\n            coneOuterAngle: typeof o.pannerAttr.coneOuterAngle !== 'undefined' ? o.pannerAttr.coneOuterAngle : self._coneOuterAngle,\n            coneOuterGain: typeof o.pannerAttr.coneOuterGain !== 'undefined' ? o.pannerAttr.coneOuterGain : self._coneOuterGain,\n            distanceModel: typeof o.pannerAttr.distanceModel !== 'undefined' ? o.pannerAttr.distanceModel : self._distanceModel,\n            maxDistance: typeof o.pannerAttr.maxDistance !== 'undefined' ? o.pannerAttr.maxDistance : self._maxDistance,\n            refDistance: typeof o.pannerAttr.refDistance !== 'undefined' ? o.pannerAttr.refDistance : self._refDistance,\n            rolloffFactor: typeof o.pannerAttr.rolloffFactor !== 'undefined' ? o.pannerAttr.rolloffFactor : self._rolloffFactor,\n            panningModel: typeof o.pannerAttr.panningModel !== 'undefined' ? o.pannerAttr.panningModel : self._panningModel\n          };\n        }\n      } else {\n        // Return this sound's panner attribute values.\n        sound = self._soundById(parseInt(args[0], 10));\n        return sound ? sound._pannerAttr : self._pannerAttr;\n      }\n    } else if (args.length === 2) {\n      o = args[0];\n      id = parseInt(args[1], 10);\n    } // Update the values of the specified sounds.\n\n\n    var ids = self._getSoundIds(id);\n\n    for (var i = 0; i < ids.length; i++) {\n      sound = self._soundById(ids[i]);\n\n      if (sound) {\n        // Merge the new values into the sound.\n        var pa = sound._pannerAttr;\n        pa = {\n          coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : pa.coneInnerAngle,\n          coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : pa.coneOuterAngle,\n          coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : pa.coneOuterGain,\n          distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : pa.distanceModel,\n          maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : pa.maxDistance,\n          refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : pa.refDistance,\n          rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : pa.rolloffFactor,\n          panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : pa.panningModel\n        }; // Update the panner values or create a new panner if none exists.\n\n        var panner = sound._panner;\n\n        if (panner) {\n          panner.coneInnerAngle = pa.coneInnerAngle;\n          panner.coneOuterAngle = pa.coneOuterAngle;\n          panner.coneOuterGain = pa.coneOuterGain;\n          panner.distanceModel = pa.distanceModel;\n          panner.maxDistance = pa.maxDistance;\n          panner.refDistance = pa.refDistance;\n          panner.rolloffFactor = pa.rolloffFactor;\n          panner.panningModel = pa.panningModel;\n        } else {\n          // Make sure we have a position to setup the node with.\n          if (!sound._pos) {\n            sound._pos = self._pos || [0, 0, -0.5];\n          } // Create a new panner node.\n\n\n          setupPanner(sound, 'spatial');\n        }\n      }\n    }\n\n    return self;\n  };\n  /** Single Sound Methods **/\n\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core Sound init.\n   * @param  {Function} _super Core Sound init method.\n   * @return {Sound}\n   */\n\n\n  Sound.prototype.init = function (_super) {\n    return function () {\n      var self = this;\n      var parent = self._parent; // Setup user-defined default properties.\n\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr; // Complete initilization with howler.js core Sound's init function.\n\n      _super.call(this); // If a stereo or position was specified, set it up.\n\n\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      }\n    };\n  }(Sound.prototype.init);\n  /**\n   * Override the Sound.reset method to clean up properties from the spatial plugin.\n   * @param  {Function} _super Sound reset method.\n   * @return {Sound}\n   */\n\n\n  Sound.prototype.reset = function (_super) {\n    return function () {\n      var self = this;\n      var parent = self._parent; // Reset all spatial plugin properties on this sound.\n\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr; // If a stereo or position was specified, set it up.\n\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      } else if (self._panner) {\n        // Disconnect the panner.\n        self._panner.disconnect(0);\n\n        self._panner = undefined;\n\n        parent._refreshBuffer(self);\n      } // Complete resetting of the sound.\n\n\n      return _super.call(this);\n    };\n  }(Sound.prototype.reset);\n  /** Helper Methods **/\n\n  /***************************************************************************/\n\n  /**\n   * Create a new panner node and save it on the sound.\n   * @param  {Sound} sound Specific sound to setup panning on.\n   * @param {String} type Type of panner to create: 'stereo' or 'spatial'.\n   */\n\n\n  var setupPanner = function setupPanner(sound, type) {\n    type = type || 'spatial'; // Create the new panner node.\n\n    if (type === 'spatial') {\n      sound._panner = Howler.ctx.createPanner();\n      sound._panner.coneInnerAngle = sound._pannerAttr.coneInnerAngle;\n      sound._panner.coneOuterAngle = sound._pannerAttr.coneOuterAngle;\n      sound._panner.coneOuterGain = sound._pannerAttr.coneOuterGain;\n      sound._panner.distanceModel = sound._pannerAttr.distanceModel;\n      sound._panner.maxDistance = sound._pannerAttr.maxDistance;\n      sound._panner.refDistance = sound._pannerAttr.refDistance;\n      sound._panner.rolloffFactor = sound._pannerAttr.rolloffFactor;\n      sound._panner.panningModel = sound._pannerAttr.panningModel;\n\n      if (typeof sound._panner.positionX !== 'undefined') {\n        sound._panner.positionX.setValueAtTime(sound._pos[0], Howler.ctx.currentTime);\n\n        sound._panner.positionY.setValueAtTime(sound._pos[1], Howler.ctx.currentTime);\n\n        sound._panner.positionZ.setValueAtTime(sound._pos[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setPosition(sound._pos[0], sound._pos[1], sound._pos[2]);\n      }\n\n      if (typeof sound._panner.orientationX !== 'undefined') {\n        sound._panner.orientationX.setValueAtTime(sound._orientation[0], Howler.ctx.currentTime);\n\n        sound._panner.orientationY.setValueAtTime(sound._orientation[1], Howler.ctx.currentTime);\n\n        sound._panner.orientationZ.setValueAtTime(sound._orientation[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setOrientation(sound._orientation[0], sound._orientation[1], sound._orientation[2]);\n      }\n    } else {\n      sound._panner = Howler.ctx.createStereoPanner();\n\n      sound._panner.pan.setValueAtTime(sound._stereo, Howler.ctx.currentTime);\n    }\n\n    sound._panner.connect(sound._node); // Update the connections.\n\n\n    if (!sound._paused) {\n      sound._parent.pause(sound._id, true).play(sound._id, true);\n    }\n  };\n})();"],"sourceRoot":""}